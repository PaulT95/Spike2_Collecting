'GLOBAL VARIABLE DECLARATIONS*****************************************************
'View handles
var mainVH% := 0;
var mvcVH%, xyVH%;


'XY-View channels
var lrampCH%, urampCH%, fdbckCH%;

'Channel duplication / calculations
var totalfdbckCH%, VLrmsCH%, VMrmsCH%, RFrmsCH%;

'Temporary trash variables for multiple functions
var x%, throaway%;
var startramp := -100;    'so that maxtime is always greater than startramp unless changed by GetXYData()

'XY-Ramp setting initialisation
var xywidth% := 15;
var fdbkdata% := 1;    'the channel data that should be given to biofeedback
var fdbkoffset := 0;    'delay of biofeedbackchannel, usually used when moving average filters are applied
var allowedoffset := 0.1;    'allowed offset for biofeedback e.g. 0.05 = 5%
var genxy[12] := {0, 0, 3, 0, 5, 1, 14, 1, 15, 1, 15, 1};    'general ramp that will be given to xy view, taken from r1 or r2  
var r1[12] := {0, 0, 3, 0, 5, 1, 15, 1, 15, 1, 15, 1};    'ramp memory vector with 12 elements alternating time and corresponding value
var r2[12] := {0, 0, 3, 0, 5, 1, 15, 1, 15, 0.5, 15, 0.5};

var rampmax := Max(genxy[1], genxy[3], genxy[5], genxy[7], genxy[9], genxy[11]);    'for ramp range offset and for x and y range
var rampmin := Min(genxy[1], genxy[3], genxy[5], genxy[7], genxy[9], genxy[11]);
var range := rampmax * allowedoffset;

'Curve feedback ramp
var storecramp% := 0;
var idlecramp%;
var genlcramp[30000], genucramp[30000];
var r3x[30000];
var i;
for i := 1 to 30000 do
    r3x[i-1] := i / 2000    'initialize x-axis with 15 seconds (2000 Hz)
next;
var r3y[30000][5];
var sc% := 0;    'selected column of matrix which will be stored to during idle 
var dc[5];     'display column for biofeedback
var factor := 1;

var rampnumber%;    'to distinguish between ramp1, ramp2 and so on (currently only two ramps, ramp 3 as curve ramp)

'View options
var mv%, xyv%, mvcv%;
var winwidth% := 70;

'Equipment Check variables
var uscheck%, tappercheck%, motioncapcheck%, isomedcheck%, shorttap%, savetrue%;
var samplekey$; 'selects samplekey based on selected variables from above
var idlesave% := 0;

'NameFile variable for prompt up and send the command to SaveEco.exe and saving automatically the US data
var  NameFiles$;

'var to store file imported (txt) for designed a personalized ramp
var fh%;
var temp[30000]; 'variable temp for storing data ramp display of ramp2(from snippet) and ramp3(from external file)

'SET FILE PATH AND CREATE TOOLBAR**************************************************
FilePathSet("", 0, "Where do you want to save everything?");
DoToolbar(); 


'CREATE THE TOOLBAR****************************************************************
Proc DoToolbar()                                            
    ToolbarClear();                                           
    ToolbarSet(0, "", Idle%);                              
    ToolbarSet(22, "Start Sampling", New%);

    ToolbarSet(20, "Change View", ChangeView%);

    ToolbarSet(16, "XY-Ramp", XYRampSettings%);
    ToolbarSet(15, "Get XY-Data", GetXYData%);

    ToolbarSet(13, "MVC", MVC%);

    ToolbarSet(10, "Equipment Options", SetEquipment%);
    ToolbarSet(9, "Snippet", Snippet%);

    'ToolbarSet(7, "Tap only", Tap%);
    ToolbarSet(6, "Start US", USStart%);
    ToolbarSet(5, "Move IsoMed", Isomed%);

    ToolbarSet(3, "StopSampling", StopSampling%);  
    ToolbarSet(2, "SaveEverything", SaveData%); 
    ToolbarSet(-1, "Quit"); 

    DisplayButtons();
    Toolbar("Collect some awesome data",231); 
end;


'DISABLE OR ENABLE TOOLBAR BUTTONS*************************************************
Proc DisplayButtons()
    docase
    case mainVH% <= 0 then
        ToolbarEnable(1, 1);
        ToolbarEnable(2, 0);
        ToolbarEnable(3, 0);
        ToolbarEnable(5, 0);
        ToolbarEnable(6, 0);
        'ToolbarEnable(7, 0);
        ToolbarEnable(9, 0);
        ToolbarEnable(10, 0);
        ToolbarEnable(10, 0);
        ToolbarEnable(13, 0);
        ToolbarEnable(15, 0);
    case mainVH% >= 0 then
        ToolbarEnable(1, 0);
        ToolbarEnable(2, 1);
        ToolbarEnable(3, 1);
        ToolbarEnable(5, 1);
        ToolbarEnable(6, 1);
        'ToolbarEnable(7, 1);
        ToolbarEnable(9, 1);
        ToolbarEnable(10, 1);
        ToolbarEnable(13, 1);
        ToolbarEnable(15, 1);
        ToolbarEnable(22, 0);
    endcase;
end;


'IDLE FUNCTION*********************************************************************
var relativetime, lastdata;    'global variables but specific to IDLE, not inside idle to not repeatedly being created
Func Idle%()
    View(mainVH%);    'select main view so that maxtime can be read in the following if-condition
    if MaxTime() < startramp + xywidth% and mainVH% > 0 then    'startramp is the maximum time at ramp initialisation <-- GetXYData()
        relativetime := MaxTime() - startramp;
        lastdata := ChanValue(fdbkdata%, MaxTime()-fdbkoffset);
        View(xyVH%);
        if xyVH% > 0 then XYAddData(fdbckCH%, relativetime, lastdata); endif;  'draw the x value as relative time to be able to have static ramps
        return 1;
    endif;

    if idlesave% = 1 and MaxTime() > startramp + xywidth% then
        Yield(1);
        ExportChanList(1);    'initialise the channel list
        ExportChanList(Cursor(9), Cursor(9)+17, -1);
        WriteFileName%();
        FileSaveAs(NameFiles$ + ".mat", 100, 0, "", 0, "UseSName=0|UseCName=1|WaveTimes=0|BinFreq=0|BinTimes=0|WaveData=2|MarkAs=1|TMarkAs=2|RMarkAs=2|RMarkData=2|WaveMarkAs=2|WaveMarkData=2|Compat=0|WaveAll=1|WaveSameN=0"); 'Export (string args)
        'Run The script.EXE for saving the TVD file automatically with the File Name
        if uscheck% =1 then
            ProgRun("C:/Users/Messung/Desktop/SaveECO.exe " + NameFiles$);    'Set the path of where you put the EXE file!
        endif;
        idlesave% := 0;
    endif;

    if idlecramp% = 1 and MaxTime() > startramp + xywidth% then
        ChanData(fdbkdata%, r3y[][sc%], Cursor(9)+1, Cursor(9)+xywidth%);
        idlecramp% := 0;
        storecramp% := 0;
        XYWindow%();    'update the xy-window
    endif;    

    return 1;      
end;


'CHANGES BETWEEN DIFFERENT VIEW OPTIONS********************************************
Func ChangeView%()
    DlgCreate("View options");
    DlgLabel(1, "Select the front view and \nhow large it is supposed to be");
    DlgCheck(2, "Main view");
    DlgCheck(3, "XY View");
    DlgCheck(4, "MVC View");
    DlgInteger(5, "Window Size", 50, 100);
    DlgShow(throaway%, mv%, xyv%, mvcv%, winwidth%);

    if mv% + xyv% + mvcv% > 1 then Message("Select only one view to modify"); ChangeView%(); endif;

    docase
        case mv% and mainVH% > 0 then FrontView(mainVH%); WindowVisible(3);    'if mainview exists and is selected always just maximise
        'in case of xy or mvc view put these on the lefthand side with the mainview on the right side
        case xyv% and xyVH% > 0 then    
            View(mainVH%); Window(winwidth%, 0, 100, 100); 
            FrontView(xyVH%); Window(0, 0, winwidth%, 100);
            if winwidth% = 100 then WindowVisible(3); endif;    'maximise if a 100%
        case mvcv% and mvcVH% > 0 then 
            View(mainVH%); Window(winwidth%, 0, 100, 100); 
            FrontView(mvcVH%); Window(0, 0, winwidth%, 100);
            if winwidth% = 100 then WindowVisible(3); endif;
    endcase;

    return 1;
end;


'START NEW SAMPLING WINDOW AND LOAD CORRESPONDING CONFIGURATIONS*******************
Func New%()					                                          
    Message("WARNING! DISABLE ISOMED TRIGGER! Depending on the selected program rotation might occur.");  
    FileOpen("C:/Users/Paolo/Documents/Spike_Scripts/config/fs_sampling_config.s2cx", 6);    'sets sampling config to use
    SampleSequencer("C:/Users/Paolo/Documents/Spike_Scripts/config/fs_sequencer.pls");     'sets sequencer file to use

    mainVH% := FileNew(0, 1);    'creates a new sampling data file / time view
    WindowVisible(3);    'maximises window					    
    FrontView(mainVH%); 'unnecessary line? 

    SampleStart();
    DisplayButtons();
    Return 1;
end;


'XY-RAMP SETTINGS DIALOG***********************************************************
Func XYRampSettings%()
    var mxywidth% := 60;

    DlgCreate("Settings for ramps with up to six points");

    'general settings
    DlgChan(1, "Select feedback channel", 0x40000);
    DlgInteger(2, "Select X-Range", 0, mxywidth%);     'probably there will be no cases where more than 60 seconds are needed
    DlgReal(3, "Select allowed offset", 0.00, 0.15);
    DlgList(4, "Select ramp to modify", "Ramp 1|Ramp 2|Ramp 3|Import Array");

    'ramp appearance settings
    var xp1% := 6;
    DlgGroup("Simple Ramp", 1, 5, 50, 14);    'just adds a fancy grouping rectangle
    DlgReal(5, "Timepoint 1", 0, mxywidth%, 0, xp1%);    'there are certain cases when this is annoying and you need to close and open the dialog again
    DlgReal(6, "Value 1", -1000, 1000, 0, xp1%+1);
    DlgReal(7, "Timepoint 2", 0, mxywidth%, 0, xp1%+2);
    DlgReal(8, "Value 2", -1000, 1000, 0, xp1%+3);
    DlgReal(9, "Timepoint 3", 0, mxywidth%, 0, xp1%+4);
    DlgReal(10, "Value 3", -1000, 1000, 0, xp1%+5);
    DlgReal(11, "Timepoint 4", 0, mxywidth%, 0, xp1%+6);
    DlgReal(12, "Value 4", -1000, 1000, 0, xp1%+7);
    DlgReal(13, "Timepoint 5", 0, mxywidth%, 0, xp1%+8);
    DlgReal(14, "Value 5", -1000, 1000, 0, xp1%+9);
    DlgReal(15, "Timepoint 6", 0, mxywidth%, 0, xp1%+10);
    DlgReal(16, "Value 6", -1000, 1000, 0, xp1%+11);
    DlgReal(17, "Offset for RMS", 0, 2, 0, xp1%+12);

    DlgGroup("Curve Ramp", 1, 20, 50, 3);
    DlgLabel(18, "Mean of ", 0, xp1%+15);
    DlgCheck(19, "C0", 10, xp1%+15);
    DlgCheck(20, "C1", 18, xp1%+15);
    DlgCheck(21, "C2", 26, xp1%+15);
    DlgCheck(22, "C3", 34, xp1%+15);
    DlgCheck(23, "C4", 42, xp1%+15);
    DlgReal(24, "Factor", -10, 10, 0, xp1%+16);

    DlgGroup("Store data to array on next snippet", 1, 24, 50, 3);
    DlgList(25, "Select array column", "C0|C1|C2|C3|C4", 100, 0, xp1%+19);
    DlgCheck(26, "Arm for storing", 0, xp1%+20);  
      
    DlgAllow(0x3ff, 0, ChangeXYSettingsDLG%);    'calls changexysettingsdlg function everytime a change in the xy-settings dialog was made
    DlgShow(fdbkdata%, xywidth%, allowedoffset, rampnumber%,  genxy, fdbkoffset, throaway%, dc, factor, sc%, storecramp%,fh%);
    
    return 1;
end;


'FUNCTION TO UPDATE XY-RAMP SETTINGS DIALOG DYNAMICALLY****************************
Func ChangeXYSettingsDLG%(item%)    'item% is the item number that was changed


    docase
        'updates the xy-view immediately by already specifying the new variable value and not waiting for DlgShow
        case item% = 2 then xywidth% := DlgValue(item%);    
        case item% = 3 then allowedoffset := DlgValue(item%);
        
        case item% = 4 then    'when different ramp selected then 
            rampnumber% := DlgValue(item%);
        
            if rampnumber% = 3 then 'if select ramp3 import txt file and overwrite values in the temp array                
                fh% := FileOpen("*.txt",8,0,"Select Text file with the array"); 'open dialog to load txt file with ramp
                if (fh% > 0) then     ' if we opened a file...
                    
                    ReadSetup("\n"); 'check the format of the file!!!           
                    var line$;
                    for x% := 0 to len(temp)-1 do   'insert each number read to a new array position in temp
                         Read(line$);
                         'PrintLog("\n %s",line$);
                         temp[x%]:= Val(line$);
                    next;                
                    FileClose();                 ' we are done with the file
                endif;
            endif;
            
            'Message("Values : %d", rampnumber%);
            if rampnumber% = 0 then    
                for x% := 0 to len(genxy)-1 do
                    DlgValue(x%+5, r1[x%]);    'set dialog fields to last entered value (or default) after changing from ramp to ramp 
                    genxy[x%] := r1[x%];  
                next;
            endif;
            if rampnumber% = 1 then
                for x% := 0 to len(genxy)-1 do
                    DlgValue(x%+5, r2[x%]);    'set dialog fields to last entered value (or default) after changing from ramp to ramp 
                    genxy[x%] := r2[x%];  
                next;
            endif;          
        
            else    'when changes to the actual ramp were made then (except for when changing ramp 3)
            if rampnumber% = 0 then
                for x% := 0 to len(genxy)-1 do
                        r1[x%] := DlgValue(x%+5);    'saves the value in placeholder for this specific ramp
                        genxy[x%] := r1[x%];    'needed to update the xy-view immediately 
                next;
            endif;
            if rampnumber% = 1 then
                for x% := 0 to len(genxy)-1 do
                        r2[x%] := DlgValue(x%+5);    'saves the value in placeholder for this specific ramp
                        genxy[x%] := r2[x%];    'needed to update the xy-view immediately 
                next;
            endif;
            
            
            
    endcase;

    'update general xy appearance and +- feedback offset
    if rampnumber% = 0 or rampnumber% = 1 then
        DlgEnable(1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17);
        DlgEnable(0, 18, 19, 20, 21, 22, 23, 24);
        rampmax := Max(genxy[1], genxy[3], genxy[5], genxy[7], genxy[9], genxy[11]);    'for ramp range offset and for x and y range, only every second value off array as these are the y values
        rampmin := Min(genxy[1], genxy[3], genxy[5], genxy[7], genxy[9], genxy[11]);
        range := rampmax * allowedoffset;    'feedback offset calculation
    endif;

    'RAMP 2
    if rampnumber% = 2 then
        DlgEnable(0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17);
        DlgEnable(1, 18, 19, 20, 21, 22, 23, 24);
        sc% := DlgValue(25);
        factor := DlgValue(24);

        'var temp[30000];
        for x% := 0 to len(dc)-1 do
            dc[x%] := DlgValue(19+x%);
            if dc[x%] = 1 then ArrAdd(temp, r3y[][x%]); endif;
        next;
        ArrDiv(temp, ArrSum(dc));
        ArrMul(temp, factor);

        rampmax := Max(temp); rampmax := temp[rampmax];
        rampmin := Min(temp); rampmin := temp[rampmin];
        range := rampmax * allowedoffset;

        ArrConst(genlcramp, temp); ArrConst(genucramp, temp);
        ArrAdd(genlcramp, range * -1);
        ArrAdd(genucramp, range);

    endif;
 ' RAMP 3
    if rampnumber% = 3 then 'open a dialog and select the TXT file long x points. In case is not the size of the window it will be interpolated
        
        DlgEnable(0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23);
        DlgEnable(1, 24);
        'sc% := DlgValue(25);
        factor := DlgValue(24);
        
        
        for x% := 0 to len(dc)-1 do
            dc[x%] := DlgValue(19+x%);
            if dc[x%] = 1 then ArrAdd(temp, r3y[][x%]); endif;
        next;
        ArrDiv(temp, ArrSum(dc));
        ArrMul(temp, factor);

        rampmax := Max(temp); rampmax := temp[rampmax];
        rampmin := Min(temp); rampmin := temp[rampmin];
        range := rampmax * allowedoffset;

        ArrConst(genlcramp, temp); ArrConst(genucramp, temp);
        ArrAdd(genlcramp, range * -1);
        ArrAdd(genucramp, range);
    endif

    XYWindow%();    'update the xy-window

    return 1;
end;


'OPEN THE XY VIEW FOR RAMP BIOFEEDBACK*********************************************
Func XYWindow%()
    if xyVH% <= 0 then 
        xyVH% := FileNew(12, 0); WindowVisible(3);    'creates the xy-view if it has not been created

        'create channels for ramp and biofeedback as well as general settings for those
        lrampCH% := XYSetChan(0, 0, 0, 1);    'new channel, no fixed number of data points, no sorting, join by line
        urampCH% := XYSetChan(0, 0, 0, 1);
        fdbckCH% := XYSetChan(0, 0, 0, 1);
        XYDrawMode(lrampCH%, 2, 0);    '2: size of marker points --> invisible
        XYDrawMode(urampCH%, 2, 0);
        XYDrawMode(fdbckCH%, 2, 0);
        XYDrawMode(lrampCH%, 4, 4);    '4: line thickness (0 - 10)
        XYDrawMode(urampCH%, 4, 4);
        XYDrawMode(fdbckCH%, 4, 3);
        ChanColourSet(lrampCH%, 1, 0, 0.21, 0.38);    'RUB-blue
        ChanColourSet(urampCH%, 1, 0, 0.21, 0.38);    'RUB-blue
        ChanColourSet(fdbckCH%, 1, 0.55, 0.68, 0.06);    'RUB-green
        XYDrawMode(-1, 5, 0);    'no auto scaling
    endif;

    FrontView(xyVH%);
    XYDelete(lrampCH%);    'make sure previous data is deleted
    XYDelete(urampCH%);

    'add the data for the ramps as defined in the settings / dialog box
    if rampnumber% = 0 or rampnumber% = 1 then
        for x% := 1 to len(genxy)/2 do
            XYAddData(lrampCH%, genxy[x%*2-2], genxy[x%*2-1]-range);
        next;
        for x% := 1 to len(genxy)/2 do
            XYAddData(urampCH%, genxy[x%*2-2], genxy[x%*2-1]+range);
        next;
    endif;

    if rampnumber% = 2 or rampnumber% = 3 then
        XYAddData(lrampCH%, r3x, genlcramp);
        XYAddData(urampCH%, r3x, genucramp);
    endif;

    XRange(0, xywidth%);
    YRange(-1, (rampmin-range)*1.1, rampmax*1.1);    'min/max of all ramp values + 10% for nicer view

    return 1;
end;


'FUNCTION TO DRAW RAMP, STANDING ALONE OR CALLED BY ANOTHER FUNCTION***************
Func GetXYData%()
    View(mainVH%);
    startramp := MaxTime();    'will result in idle if-statement being true
    if xyVH% > 0 then
        View(xyVH%);
        XYDelete(fdbckCH%);     'removes old biofeedback
    endif;
    return 1;
end;


'OPEN A WINDOW WITH A KEY AS TRIGGER TO DISPLAY DATA*******************************
'shoutout to Brent Raiteri as I stole this from him
Func MVC%()
    FrontView(mainVH%); 
    if mvcVH% = 0 then mvcVH% := WindowDuplicate(); WindowVisible(3); endif;
    FrontView(mvcVH%);
    CursorNew(0, 1);       
    ChanHide(-1);    'hide all channels
    ChanShow("1");                          
    ViewTrigger(31, 0, 0, 1, 2, 10, 1, 1, 3, 0);    'enable view trigger
    CursorVisible(0, 1);
    CursorNew(0, 4);                            
    CursorActive(4, 16, 0, "Cursor(0)+10");     'you will want to setup cursors based on your needs here
    CursorNew(0,7);                            
    CursorActive(7, 16, 0, "Cursor(0)+2");
    CursorNew(0, 8);                           
    CursorActive(8, 16, 0, "Cursor(0)+7");
    CursorNew(0, 9);                           
    CursorActive(9, 16, 0, "Cursor(0)+8");
    CursorVisible(1, 1);                     
    XRange(0, 10);   
    CursorOpen(1, 1, -2, 10);    'open cursor values dialog
    Window(50,85);    'set location of cursor values dialog
    FrontView(mvcVH%);
    Return 1;
End;


'SELECT WHICH EQUIPMENT SHOULD BE ACTIVATED WHEN SAVING A SNIPPET******************
'TODO: Add a field which sets the number of seconds stuff should be sampled --> pass this to the sequencer'
Func SetEquipment%()
    DlgCreate("Select Capture Equipment");
    DlgLabel(1, "Devices that will be used / triggered during 15s snippet");
    DlgCheck(2, "Ultrasound");
    'DlgCheck(3, "Tendon Tapper");
    DlgCheck(3, "Motion Capture");
    DlgCheck(4, "Isomed");
    DlgCheck(5, "Save Snippet");
    DlgCheck(6, "Short tap");
    DlgLabel(7, "Note that only each option on its own, everything, and all but the isomed will result in sequencer output. \nIsomed triggered after 6.5 seconds, Ultrasound at 150 Hz, Tapper at 50 Hz");
    'DlgShow(throaway%, uscheck%, tappercheck%, motioncapcheck%, isomedcheck%, savetrue%, shorttap%, throaway%);
    DlgShow(throaway%, uscheck%,  motioncapcheck%, isomedcheck%, savetrue%, shorttap%, throaway%);

    docase
        case shorttap% = 1 then samplekey$ := "j";
        'case tappercheck% = 1 and uscheck% = 0 and motioncapcheck% = 0 and isomedcheck% = 0 then samplekey$ := "t";    'tendontapper only
        case uscheck% = 1 and tappercheck% = 0 and motioncapcheck% = 0 and isomedcheck% = 0 then samplekey$ := "u";    'ultrasound only
        'case motioncapcheck% = 1 and tappercheck% = 0 and isomedcheck% = 0 and uscheck% = 0 then samplekey$ := "v";    'vicon only
        'case isomedcheck% = 1 and motioncapcheck% = 0 and uscheck% = 0 and tappercheck% = 0 then samplekey$ := "i";    'isomed rotation only
        'case uscheck% = 1 and tappercheck% = 1 and motioncapcheck% = 1 and isomedcheck% = 0 then samplekey$ := "1";    'all but isomed rotation
        'case uscheck% = 1 and tappercheck% = 1 and motioncapcheck% = 1 and isomedcheck% = 1 then samplekey$ := "2";    'all
        case uscheck% = 1 and isomedcheck% = 1 then samplekey$ := "m"; '100Hz TTL for all system using BNC splitter
        else samplekey$ := "n";    'just instructs the sequencer to HOLD
    endcase;

    return 1;
end;


'FUNCTION TO TRIGGER EQUIPMENT, START BIOFEEDBACK AND SAVE SHORT SNIPPETS**********
Func Snippet%()

    'prepare a cursor from which on the snippet can be saved
    View(mainVH%); CursorNew(MaxTime(), 9); Cursor(9, MaxTime()); CursorVisible(9);

    'you can't rely on the timing of the cursor positions for post-analysis, therefore save an extra second beforehand,
    'such that you can always refer to your event or TTL channels as common signal
    Yield(1);   

    GetXYData%();   'sets startramp variable to current time so that biofeedback can be given
    SampleKey(samplekey$);    'use sequencer based on sample key defined in SetEquipment%()

    if savetrue% = 1 then idlesave% := 1; endif;    'idle function checks for state of idlesave% variable
    if storecramp% = 1 then idlecramp% :=1; endif;     'idle function checks for state of idlecramp% variable

    return 1;
end;


'DIALOG BOX FOR WRITE FILE NAME **************************************************************************
'Dialog Box to set up the name for files and Return the NameFiles(global var to initialize outside the func)
'it will concate it with the Path. Name must not be empty or It won't work. Maybe add a control if you want
Func WriteFileName%()

    'Dialog box
    var ok%, item1%, item2$:= "";
    var xo := -8;   'Space from right edge for slider
    while(item2$ = "") do
        DlgCreate("Type the file name (without ext)",0,0,100,5);
        DlgString(2, "File Name (max 100 chars)",100,"",xo,1.5);    'String item with max 100char (you can change that)
        DlgButton(1,"&Ok|Ox70|Tooltip");    'button F1+function
        DlgAllow(0x3ff, 0);     'Allow all, no idle, change function
        ok% := DlgShow(item1%,item2$);
    wend
    'concat Path and File Name 
    NameFiles$ := FilePath$() + item2$;
    return 1;

end;




'START ULTRASOUND******************************************************************
Func USStart%()
    SampleSeqVar(1, 1);    'the sequener variable '1' controls ifinity ultrasound triggering, 1 for starting, anything else for breaking out
    SampleKey("U");
    ToolbarSet(6, "Stop US", USstop%);
    return 1;
end;

Func USStop%()
    SampleSeqVar(1, 0);    'the sequener variable '1' controls ifinity ultrasound triggering, 1 for starting, anything else for breaking out
    ToolbarSet(6, "Start US", USstart%);
    return 1;
end;


'MOVE ISOMED***********************************************************************
Func Isomed%()
    SampleKey("I");    'moves the isomed if it is in the right position, otherwise on the next click
    return 1;
end;


'STOP SAMPLING*********************************************************************
Func StopSampling%()
    var ret%;
    ret% := Query("Are you sure you wish to stop sampling?");    'dialog box to say yes or no to stopping the sampling process
    if ret% = 1 then                                 
        FrontView(mainVH%);
        SampleStop();
    endif;  
    ToolbarEnable(22, 1);   'starting a new sampling process becomes available again
    ToolbarEnable(1, 1);    'quitting the script becomes available, at least you can't accidentally close a window until then
    return 1;
end;


'SAVE FILE*************************************************************************
Func SaveData%()
    FrontView(mainVH%);
    FileSave();    'Saves sampled data file
    return 1;
end;
